buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
}

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'com.derongan.minecraft'
version = pluginVersion

if (project.hasProperty("buildNo")) version += ".$buildNo"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/groups/public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'rutger-repo'
        url = 'http://www.rutgerkok.nl/repo'
    }
    maven {
        name = "MineInAbyss"
        url = uri("https://maven.pkg.github.com/MineInAbyss/Idofront")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/MineInAbyss/DeeperWorld")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    compileOnly 'org.spigotmc:spigot-api:1.15-R0.1-SNAPSHOT'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compileOnly "nl.rutgerkok:blocklocker:1.7"

    if (useLocalIdofront.toBoolean()) implementation project(':idofront')
    else implementation group: 'com.mineinabyss', name: 'idofront', version: '0.1.2-alpha.6'
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
    }
}

shadowJar {
    getArchiveClassifier().set(null)
    relocate 'com.mineinabyss.idofront', "${project.group}.${project.name}.idofront"

    minimize {
        exclude(dependency("org.jetbrains.kotlin:.*"))
    }
}

build.dependsOn shadowJar

compileKotlin { kotlinOptions { jvmTarget = "1.8" } }
compileTestKotlin { kotlinOptions { jvmTarget = "1.8" } }

//Move into plugins folder
if (project.hasProperty("plugin_path") && plugin_path) {
    println("Copying to plugin directory $plugin_path")
    task copyJar(type: Copy) {
        from shadowJar // here it automatically reads jar file produced from jar task
        into plugin_path
    }
    build.dependsOn copyJar
}